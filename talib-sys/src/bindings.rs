/* automatically generated by rust-bindgen 0.69.5 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const __64BIT__: u32 = 1;
pub const TA_INTEGER_MIN: i32 = -2147483647;
pub const TA_INTEGER_MAX: u32 = 2147483647;
pub const TA_REAL_MIN: f64 = -30000000000000000000000000000000000000.0;
pub const TA_REAL_MAX: f64 = 30000000000000000000000000000000000000.0;
pub const TA_INTEGER_DEFAULT: i32 = -2147483648;
pub const TA_REAL_DEFAULT: f64 = -40000000000000000000000000000000000000.0;
pub const TA_FUNC_FLG_OVERLAP: u32 = 16777216;
pub const TA_FUNC_FLG_VOLUME: u32 = 67108864;
pub const TA_FUNC_FLG_UNST_PER: u32 = 134217728;
pub const TA_FUNC_FLG_CANDLESTICK: u32 = 268435456;
pub const TA_IN_PRICE_OPEN: u32 = 1;
pub const TA_IN_PRICE_HIGH: u32 = 2;
pub const TA_IN_PRICE_LOW: u32 = 4;
pub const TA_IN_PRICE_CLOSE: u32 = 8;
pub const TA_IN_PRICE_VOLUME: u32 = 16;
pub const TA_IN_PRICE_OPENINTEREST: u32 = 32;
pub const TA_IN_PRICE_TIMESTAMP: u32 = 64;
pub const TA_OPTIN_IS_PERCENT: u32 = 1048576;
pub const TA_OPTIN_IS_DEGREE: u32 = 2097152;
pub const TA_OPTIN_IS_CURRENCY: u32 = 4194304;
pub const TA_OPTIN_ADVANCED: u32 = 16777216;
pub const TA_OUT_LINE: u32 = 1;
pub const TA_OUT_DOT_LINE: u32 = 2;
pub const TA_OUT_DASH_LINE: u32 = 4;
pub const TA_OUT_DOT: u32 = 8;
pub const TA_OUT_HISTO: u32 = 16;
pub const TA_OUT_PATTERN_BOOL: u32 = 32;
pub const TA_OUT_PATTERN_BULL_BEAR: u32 = 64;
pub const TA_OUT_PATTERN_STRENGTH: u32 = 128;
pub const TA_OUT_POSITIVE: u32 = 256;
pub const TA_OUT_NEGATIVE: u32 = 512;
pub const TA_OUT_ZERO: u32 = 1024;
pub const TA_OUT_UPPER_LIMIT: u32 = 2048;
pub const TA_OUT_LOWER_LIMIT: u32 = 4096;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    const UNINIT: ::std::mem::MaybeUninit<_iobuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _clearfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _controlfp(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _set_controlfp(_NewValue: ::std::os::raw::c_uint, _Mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _controlfp_s(
        _CurrentState: *mut ::std::os::raw::c_uint,
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> errno_t;
}
extern "C" {
    pub fn _statusfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _fpreset();
}
extern "C" {
    pub fn _control87(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __fpecode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpe_flt_rounds() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn _scalb(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn _logb(_X: f64) -> f64;
}
extern "C" {
    pub fn _nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _finite(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnan(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclass(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scalbf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn fpreset();
}
pub type Int32 = ::std::os::raw::c_int;
pub type UInt32 = ::std::os::raw::c_uint;
pub type Int64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TA_RetCode {
    TA_SUCCESS = 0,
    TA_LIB_NOT_INITIALIZE = 1,
    TA_BAD_PARAM = 2,
    TA_ALLOC_ERR = 3,
    TA_GROUP_NOT_FOUND = 4,
    TA_FUNC_NOT_FOUND = 5,
    TA_INVALID_HANDLE = 6,
    TA_INVALID_PARAM_HOLDER = 7,
    TA_INVALID_PARAM_HOLDER_TYPE = 8,
    TA_INVALID_PARAM_FUNCTION = 9,
    TA_INPUT_NOT_ALL_INITIALIZE = 10,
    TA_OUTPUT_NOT_ALL_INITIALIZE = 11,
    TA_OUT_OF_RANGE_START_INDEX = 12,
    TA_OUT_OF_RANGE_END_INDEX = 13,
    TA_INVALID_LIST_TYPE = 14,
    TA_BAD_OBJECT = 15,
    TA_NOT_SUPPORTED = 16,
    TA_INTERNAL_ERROR = 5000,
    TA_UNKNOWN_ERR = 65535,
}
pub const TA_Compatibility_TA_COMPATIBILITY_DEFAULT: TA_Compatibility = 0;
pub const TA_Compatibility_TA_COMPATIBILITY_METASTOCK: TA_Compatibility = 1;
pub type TA_Compatibility = ::std::os::raw::c_int;
pub const TA_MAType_TA_MAType_SMA: TA_MAType = 0;
pub const TA_MAType_TA_MAType_EMA: TA_MAType = 1;
pub const TA_MAType_TA_MAType_WMA: TA_MAType = 2;
pub const TA_MAType_TA_MAType_DEMA: TA_MAType = 3;
pub const TA_MAType_TA_MAType_TEMA: TA_MAType = 4;
pub const TA_MAType_TA_MAType_TRIMA: TA_MAType = 5;
pub const TA_MAType_TA_MAType_KAMA: TA_MAType = 6;
pub const TA_MAType_TA_MAType_MAMA: TA_MAType = 7;
pub const TA_MAType_TA_MAType_T3: TA_MAType = 8;
pub type TA_MAType = ::std::os::raw::c_int;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_ADX: TA_FuncUnstId = 0;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_ADXR: TA_FuncUnstId = 1;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_ATR: TA_FuncUnstId = 2;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_CMO: TA_FuncUnstId = 3;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_DX: TA_FuncUnstId = 4;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_EMA: TA_FuncUnstId = 5;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_DCPERIOD: TA_FuncUnstId = 6;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_DCPHASE: TA_FuncUnstId = 7;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_PHASOR: TA_FuncUnstId = 8;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_SINE: TA_FuncUnstId = 9;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_TRENDLINE: TA_FuncUnstId = 10;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_TRENDMODE: TA_FuncUnstId = 11;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_KAMA: TA_FuncUnstId = 12;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_MAMA: TA_FuncUnstId = 13;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_MFI: TA_FuncUnstId = 14;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_MINUS_DI: TA_FuncUnstId = 15;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_MINUS_DM: TA_FuncUnstId = 16;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_NATR: TA_FuncUnstId = 17;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_PLUS_DI: TA_FuncUnstId = 18;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_PLUS_DM: TA_FuncUnstId = 19;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_RSI: TA_FuncUnstId = 20;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_STOCHRSI: TA_FuncUnstId = 21;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_T3: TA_FuncUnstId = 22;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_ALL: TA_FuncUnstId = 23;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_FuncUnstId_TA_FUNC_UNST_NONE: TA_FuncUnstId = -1;
#[doc = " START GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub type TA_FuncUnstId = ::std::os::raw::c_int;
#[doc = " END GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_RangeType_TA_RangeType_RealBody: TA_RangeType = 0;
#[doc = " END GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_RangeType_TA_RangeType_HighLow: TA_RangeType = 1;
#[doc = " END GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub const TA_RangeType_TA_RangeType_Shadows: TA_RangeType = 2;
#[doc = " END GENCODE SECTION 1 - DO NOT DELETE THIS LINE"]
pub type TA_RangeType = ::std::os::raw::c_int;
pub const TA_CandleSettingType_TA_BodyLong: TA_CandleSettingType = 0;
pub const TA_CandleSettingType_TA_BodyVeryLong: TA_CandleSettingType = 1;
pub const TA_CandleSettingType_TA_BodyShort: TA_CandleSettingType = 2;
pub const TA_CandleSettingType_TA_BodyDoji: TA_CandleSettingType = 3;
pub const TA_CandleSettingType_TA_ShadowLong: TA_CandleSettingType = 4;
pub const TA_CandleSettingType_TA_ShadowVeryLong: TA_CandleSettingType = 5;
pub const TA_CandleSettingType_TA_ShadowShort: TA_CandleSettingType = 6;
pub const TA_CandleSettingType_TA_ShadowVeryShort: TA_CandleSettingType = 7;
pub const TA_CandleSettingType_TA_Near: TA_CandleSettingType = 8;
pub const TA_CandleSettingType_TA_Far: TA_CandleSettingType = 9;
pub const TA_CandleSettingType_TA_Equal: TA_CandleSettingType = 10;
pub const TA_CandleSettingType_TA_AllCandleSettings: TA_CandleSettingType = 11;
pub type TA_CandleSettingType = ::std::os::raw::c_int;
extern "C" {
    pub fn TA_GetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionMajor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionMinor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionBuild() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionDate() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionTime() -> *const ::std::os::raw::c_char;
}
pub type TA_Real = f64;
pub type TA_Integer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_StringTable {
    pub size: ::std::os::raw::c_uint,
    pub string: *mut *const ::std::os::raw::c_char,
    pub hiddenData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TA_StringTable() {
    const UNINIT: ::std::mem::MaybeUninit<TA_StringTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_StringTable>(),
        24usize,
        concat!("Size of: ", stringify!(TA_StringTable))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_StringTable>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_StringTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_StringTable),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_StringTable),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiddenData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_StringTable),
            "::",
            stringify!(hiddenData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_RetCodeInfo {
    pub enumStr: *const ::std::os::raw::c_char,
    pub infoStr: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_RetCodeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_RetCodeInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_RetCodeInfo>(),
        16usize,
        concat!("Size of: ", stringify!(TA_RetCodeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_RetCodeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_RetCodeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enumStr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RetCodeInfo),
            "::",
            stringify!(enumStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infoStr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RetCodeInfo),
            "::",
            stringify!(infoStr)
        )
    );
}
extern "C" {
    pub fn TA_SetRetCodeInfo(theRetCode: TA_RetCode, retCodeInfo: *mut TA_RetCodeInfo);
}
extern "C" {
    pub fn TA_Initialize() -> TA_RetCode;
}
extern "C" {
    pub fn TA_Shutdown() -> TA_RetCode;
}
extern "C" {
    pub fn TA_GroupTableAlloc(table: *mut *mut TA_StringTable) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GroupTableFree(table: *mut TA_StringTable) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FuncTableAlloc(
        group: *const ::std::os::raw::c_char,
        table: *mut *mut TA_StringTable,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FuncTableFree(table: *mut TA_StringTable) -> TA_RetCode;
}
pub type TA_FuncHandle = ::std::os::raw::c_uint;
extern "C" {
    pub fn TA_GetFuncHandle(
        name: *const ::std::os::raw::c_char,
        handle: *mut *const TA_FuncHandle,
    ) -> TA_RetCode;
}
pub type TA_FuncFlags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_FuncInfo {
    pub name: *const ::std::os::raw::c_char,
    pub group: *const ::std::os::raw::c_char,
    pub hint: *const ::std::os::raw::c_char,
    pub camelCaseName: *const ::std::os::raw::c_char,
    pub flags: TA_FuncFlags,
    pub nbInput: ::std::os::raw::c_uint,
    pub nbOptInput: ::std::os::raw::c_uint,
    pub nbOutput: ::std::os::raw::c_uint,
    pub handle: *const TA_FuncHandle,
}
#[test]
fn bindgen_test_layout_TA_FuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_FuncInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_FuncInfo>(),
        56usize,
        concat!("Size of: ", stringify!(TA_FuncInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_FuncInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_FuncInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).camelCaseName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(camelCaseName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbInput) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(nbInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbOptInput) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(nbOptInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbOutput) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(nbOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(handle)
        )
    );
}
extern "C" {
    pub fn TA_GetFuncInfo(
        handle: *const TA_FuncHandle,
        funcInfo: *mut *const TA_FuncInfo,
    ) -> TA_RetCode;
}
pub type TA_CallForEachFunc = ::std::option::Option<
    unsafe extern "C" fn(funcInfo: *const TA_FuncInfo, opaqueData: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn TA_ForEachFunc(
        functionToCall: TA_CallForEachFunc,
        opaqueData: *mut ::std::os::raw::c_void,
    ) -> TA_RetCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_RealRange {
    pub min: TA_Real,
    pub max: TA_Real,
    pub precision: TA_Integer,
    pub suggested_start: TA_Real,
    pub suggested_end: TA_Real,
    pub suggested_increment: TA_Real,
}
#[test]
fn bindgen_test_layout_TA_RealRange() {
    const UNINIT: ::std::mem::MaybeUninit<TA_RealRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_RealRange>(),
        48usize,
        concat!("Size of: ", stringify!(TA_RealRange))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_RealRange>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_RealRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(suggested_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(suggested_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_increment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(suggested_increment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_IntegerRange {
    pub min: TA_Integer,
    pub max: TA_Integer,
    pub suggested_start: TA_Integer,
    pub suggested_end: TA_Integer,
    pub suggested_increment: TA_Integer,
}
#[test]
fn bindgen_test_layout_TA_IntegerRange() {
    const UNINIT: ::std::mem::MaybeUninit<TA_IntegerRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_IntegerRange>(),
        20usize,
        concat!("Size of: ", stringify!(TA_IntegerRange))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_IntegerRange>(),
        4usize,
        concat!("Alignment of ", stringify!(TA_IntegerRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(suggested_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(suggested_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_increment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(suggested_increment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_RealDataPair {
    pub value: TA_Real,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_RealDataPair() {
    const UNINIT: ::std::mem::MaybeUninit<TA_RealDataPair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_RealDataPair>(),
        16usize,
        concat!("Size of: ", stringify!(TA_RealDataPair))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_RealDataPair>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_RealDataPair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealDataPair),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealDataPair),
            "::",
            stringify!(string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_IntegerDataPair {
    pub value: TA_Integer,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_IntegerDataPair() {
    const UNINIT: ::std::mem::MaybeUninit<TA_IntegerDataPair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_IntegerDataPair>(),
        16usize,
        concat!("Size of: ", stringify!(TA_IntegerDataPair))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_IntegerDataPair>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_IntegerDataPair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerDataPair),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerDataPair),
            "::",
            stringify!(string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_RealList {
    pub data: *const TA_RealDataPair,
    pub nbElement: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_TA_RealList() {
    const UNINIT: ::std::mem::MaybeUninit<TA_RealList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_RealList>(),
        16usize,
        concat!("Size of: ", stringify!(TA_RealList))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_RealList>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_RealList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealList),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbElement) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealList),
            "::",
            stringify!(nbElement)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_IntegerList {
    pub data: *const TA_IntegerDataPair,
    pub nbElement: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_TA_IntegerList() {
    const UNINIT: ::std::mem::MaybeUninit<TA_IntegerList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_IntegerList>(),
        16usize,
        concat!("Size of: ", stringify!(TA_IntegerList))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_IntegerList>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_IntegerList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerList),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbElement) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerList),
            "::",
            stringify!(nbElement)
        )
    );
}
pub const TA_InputParameterType_TA_Input_Price: TA_InputParameterType = 0;
pub const TA_InputParameterType_TA_Input_Real: TA_InputParameterType = 1;
pub const TA_InputParameterType_TA_Input_Integer: TA_InputParameterType = 2;
pub type TA_InputParameterType = ::std::os::raw::c_int;
pub const TA_OptInputParameterType_TA_OptInput_RealRange: TA_OptInputParameterType = 0;
pub const TA_OptInputParameterType_TA_OptInput_RealList: TA_OptInputParameterType = 1;
pub const TA_OptInputParameterType_TA_OptInput_IntegerRange: TA_OptInputParameterType = 2;
pub const TA_OptInputParameterType_TA_OptInput_IntegerList: TA_OptInputParameterType = 3;
pub type TA_OptInputParameterType = ::std::os::raw::c_int;
pub const TA_OutputParameterType_TA_Output_Real: TA_OutputParameterType = 0;
pub const TA_OutputParameterType_TA_Output_Integer: TA_OutputParameterType = 1;
pub type TA_OutputParameterType = ::std::os::raw::c_int;
pub type TA_InputFlags = ::std::os::raw::c_int;
pub type TA_OptInputFlags = ::std::os::raw::c_int;
pub type TA_OutputFlags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_InputParameterInfo {
    pub type_: TA_InputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_InputFlags,
}
#[test]
fn bindgen_test_layout_TA_InputParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_InputParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_InputParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(TA_InputParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_InputParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_InputParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_InputParameterInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_InputParameterInfo),
            "::",
            stringify!(paramName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_InputParameterInfo),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_OptInputParameterInfo {
    pub type_: TA_OptInputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_OptInputFlags,
    pub displayName: *const ::std::os::raw::c_char,
    pub dataSet: *const ::std::os::raw::c_void,
    pub defaultValue: TA_Real,
    pub hint: *const ::std::os::raw::c_char,
    pub helpFile: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_OptInputParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_OptInputParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_OptInputParameterInfo>(),
        64usize,
        concat!("Size of: ", stringify!(TA_OptInputParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_OptInputParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_OptInputParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(paramName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(displayName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSet) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(dataSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultValue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(defaultValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).helpFile) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(helpFile)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_OutputParameterInfo {
    pub type_: TA_OutputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_OutputFlags,
}
#[test]
fn bindgen_test_layout_TA_OutputParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_OutputParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_OutputParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(TA_OutputParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_OutputParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_OutputParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OutputParameterInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OutputParameterInfo),
            "::",
            stringify!(paramName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OutputParameterInfo),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn TA_GetInputParameterInfo(
        handle: *const TA_FuncHandle,
        paramIndex: ::std::os::raw::c_uint,
        info: *mut *const TA_InputParameterInfo,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetOptInputParameterInfo(
        handle: *const TA_FuncHandle,
        paramIndex: ::std::os::raw::c_uint,
        info: *mut *const TA_OptInputParameterInfo,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetOutputParameterInfo(
        handle: *const TA_FuncHandle,
        paramIndex: ::std::os::raw::c_uint,
        info: *mut *const TA_OutputParameterInfo,
    ) -> TA_RetCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_ParamHolder {
    pub hiddenData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TA_ParamHolder() {
    const UNINIT: ::std::mem::MaybeUninit<TA_ParamHolder> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_ParamHolder>(),
        8usize,
        concat!("Size of: ", stringify!(TA_ParamHolder))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_ParamHolder>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_ParamHolder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiddenData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_ParamHolder),
            "::",
            stringify!(hiddenData)
        )
    );
}
extern "C" {
    pub fn TA_ParamHolderAlloc(
        handle: *const TA_FuncHandle,
        allocatedParams: *mut *mut TA_ParamHolder,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ParamHolderFree(params: *mut TA_ParamHolder) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamIntegerPtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        value: *const TA_Integer,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamRealPtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        value: *const TA_Real,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamPricePtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        open: *const TA_Real,
        high: *const TA_Real,
        low: *const TA_Real,
        close: *const TA_Real,
        volume: *const TA_Real,
        openInterest: *const TA_Real,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOptInputParamInteger(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        optInValue: TA_Integer,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOptInputParamReal(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        optInValue: TA_Real,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOutputParamIntegerPtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        out: *mut TA_Integer,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOutputParamRealPtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        out: *mut TA_Real,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetLookback(params: *const TA_ParamHolder, lookback: *mut TA_Integer) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CallFunc(
        params: *const TA_ParamHolder,
        startIdx: TA_Integer,
        endIdx: TA_Integer,
        outBegIdx: *mut TA_Integer,
        outNbElement: *mut TA_Integer,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FunctionDescriptionXML() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_ACOS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ACOS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ACOS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        inVolume: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        inVolume: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        inVolume: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        inVolume: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADOSC_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADXR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADXR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADXR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_APO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_APO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_APO_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AROON(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outAroonDown: *mut f64,
        outAroonUp: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AROON(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outAroonDown: *mut f64,
        outAroonUp: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AROON_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AROONOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AROONOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AROONOSC_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ASIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ASIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ASIN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ATAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ATAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ATAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ATR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ATR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ATR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AVGPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AVGPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AVGPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BBANDS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDevUp: f64,
        optInNbDevDn: f64,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outRealUpperBand: *mut f64,
        outRealMiddleBand: *mut f64,
        outRealLowerBand: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BBANDS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDevUp: f64,
        optInNbDevDn: f64,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outRealUpperBand: *mut f64,
        outRealMiddleBand: *mut f64,
        outRealLowerBand: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BBANDS_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDevUp: f64,
        optInNbDevDn: f64,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BETA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BETA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BETA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BOP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BOP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BOP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CCI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CCI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CCI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL2CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL2CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL2CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3BLACKCROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3BLACKCROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3BLACKCROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3INSIDE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3INSIDE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3INSIDE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3LINESTRIKE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3LINESTRIKE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3LINESTRIKE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3OUTSIDE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3OUTSIDE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3OUTSIDE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3STARSINSOUTH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3STARSINSOUTH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3STARSINSOUTH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3WHITESOLDIERS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3WHITESOLDIERS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3WHITESOLDIERS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLABANDONEDBABY(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLABANDONEDBABY(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLABANDONEDBABY_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLADVANCEBLOCK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLADVANCEBLOCK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLADVANCEBLOCK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLBELTHOLD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLBELTHOLD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLBELTHOLD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLBREAKAWAY(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLBREAKAWAY(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLBREAKAWAY_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCLOSINGMARUBOZU(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCLOSINGMARUBOZU(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCLOSINGMARUBOZU_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCONCEALBABYSWALL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCONCEALBABYSWALL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCONCEALBABYSWALL_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCOUNTERATTACK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCOUNTERATTACK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCOUNTERATTACK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDARKCLOUDCOVER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDARKCLOUDCOVER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDARKCLOUDCOVER_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDOJISTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDRAGONFLYDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDRAGONFLYDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDRAGONFLYDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLENGULFING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLENGULFING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLENGULFING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLEVENINGDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLEVENINGDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLEVENINGDOJISTAR_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLEVENINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLEVENINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLEVENINGSTAR_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLGAPSIDESIDEWHITE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLGAPSIDESIDEWHITE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLGAPSIDESIDEWHITE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLGRAVESTONEDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLGRAVESTONEDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLGRAVESTONEDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHAMMER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHAMMER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHAMMER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHANGINGMAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHANGINGMAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHANGINGMAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHARAMI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHARAMI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHARAMI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHARAMICROSS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHARAMICROSS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHARAMICROSS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIGHWAVE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIGHWAVE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIGHWAVE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIKKAKE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIKKAKE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIKKAKE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIKKAKEMOD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIKKAKEMOD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIKKAKEMOD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHOMINGPIGEON(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHOMINGPIGEON(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHOMINGPIGEON_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLIDENTICAL3CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLIDENTICAL3CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLIDENTICAL3CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLINNECK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLINNECK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLINNECK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLINVERTEDHAMMER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLINVERTEDHAMMER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLINVERTEDHAMMER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLKICKING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLKICKING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLKICKING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLKICKINGBYLENGTH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLKICKINGBYLENGTH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLKICKINGBYLENGTH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLADDERBOTTOM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLADDERBOTTOM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLADDERBOTTOM_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLONGLEGGEDDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLONGLEGGEDDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLONGLEGGEDDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLONGLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLONGLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLONGLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMARUBOZU(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMARUBOZU(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMARUBOZU_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMATCHINGLOW(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMATCHINGLOW(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMATCHINGLOW_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMATHOLD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMATHOLD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMATHOLD_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMORNINGDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMORNINGDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMORNINGDOJISTAR_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMORNINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMORNINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMORNINGSTAR_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLONNECK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLONNECK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLONNECK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLPIERCING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLPIERCING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLPIERCING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLRICKSHAWMAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLRICKSHAWMAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLRICKSHAWMAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLRISEFALL3METHODS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLRISEFALL3METHODS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLRISEFALL3METHODS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSEPARATINGLINES(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSEPARATINGLINES(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSEPARATINGLINES_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSHOOTINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSHOOTINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSHOOTINGSTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSHORTLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSHORTLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSHORTLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSPINNINGTOP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSPINNINGTOP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSPINNINGTOP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSTALLEDPATTERN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSTALLEDPATTERN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSTALLEDPATTERN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSTICKSANDWICH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSTICKSANDWICH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSTICKSANDWICH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTAKURI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTAKURI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTAKURI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTASUKIGAP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTASUKIGAP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTASUKIGAP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTHRUSTING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTHRUSTING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTHRUSTING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTRISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTRISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTRISTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLUNIQUE3RIVER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLUNIQUE3RIVER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLUNIQUE3RIVER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLUPSIDEGAP2CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLUPSIDEGAP2CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLUPSIDEGAP2CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLXSIDEGAP3METHODS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLXSIDEGAP3METHODS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLXSIDEGAP3METHODS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CEIL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CEIL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CEIL_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CMO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CMO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CMO_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CORREL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CORREL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CORREL_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_COS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_COS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_COS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_COSH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_COSH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_COSH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DEMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DEMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DEMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DIV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DIV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DIV_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_EMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_EMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_EMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_EXP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_EXP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_EXP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_FLOOR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_FLOOR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FLOOR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_DCPERIOD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_DCPERIOD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_DCPERIOD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_DCPHASE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_DCPHASE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_DCPHASE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_PHASOR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInPhase: *mut f64,
        outQuadrature: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_PHASOR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInPhase: *mut f64,
        outQuadrature: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_PHASOR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_SINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outSine: *mut f64,
        outLeadSine: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_SINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outSine: *mut f64,
        outLeadSine: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_SINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_TRENDLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_TRENDLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_TRENDLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_TRENDMODE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_TRENDMODE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_TRENDMODE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_KAMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_KAMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_KAMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_ANGLE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_ANGLE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_ANGLE_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_INTERCEPT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_INTERCEPT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_INTERCEPT_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_SLOPE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_SLOPE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_SLOPE_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LOG10(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LOG10(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LOG10_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MA_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSignalPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSignalPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACD_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSignalPeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACDEXT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInFastMAType: TA_MAType,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSlowMAType: TA_MAType,
        optInSignalPeriod: ::std::os::raw::c_int,
        optInSignalMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACDEXT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInFastMAType: TA_MAType,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSlowMAType: TA_MAType,
        optInSignalPeriod: ::std::os::raw::c_int,
        optInSignalMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACDEXT_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInFastMAType: TA_MAType,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSlowMAType: TA_MAType,
        optInSignalPeriod: ::std::os::raw::c_int,
        optInSignalMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACDFIX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInSignalPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACDFIX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInSignalPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACDFIX_Lookback(optInSignalPeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastLimit: f64,
        optInSlowLimit: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMAMA: *mut f64,
        outFAMA: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastLimit: f64,
        optInSlowLimit: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMAMA: *mut f64,
        outFAMA: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAMA_Lookback(optInFastLimit: f64, optInSlowLimit: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAVP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        inPeriods: *const f64,
        optInMinPeriod: ::std::os::raw::c_int,
        optInMaxPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAVP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        inPeriods: *const f32,
        optInMinPeriod: ::std::os::raw::c_int,
        optInMaxPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAVP_Lookback(
        optInMinPeriod: ::std::os::raw::c_int,
        optInMaxPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAXINDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAXINDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAXINDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MEDPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MEDPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MEDPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MFI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        inVolume: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MFI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        inVolume: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MFI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIDPOINT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIDPOINT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIDPOINT_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIDPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIDPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIDPRICE_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIN_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MININDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MININDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MININDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINMAX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMin: *mut f64,
        outMax: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINMAX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMin: *mut f64,
        outMax: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINMAX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINMAXINDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMinIdx: *mut ::std::os::raw::c_int,
        outMaxIdx: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINMAXINDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMinIdx: *mut ::std::os::raw::c_int,
        outMaxIdx: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINMAXINDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINUS_DI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINUS_DI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINUS_DI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINUS_DM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINUS_DM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINUS_DM_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MOM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MOM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MOM_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MULT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MULT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MULT_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_NATR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_NATR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_NATR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_OBV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        inVolume: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_OBV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        inVolume: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_OBV_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PLUS_DI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PLUS_DI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PLUS_DI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PLUS_DM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PLUS_DM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PLUS_DM_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PPO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PPO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PPO_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROC_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCP_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCR100(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCR100(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCR100_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_RSI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_RSI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_RSI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInAcceleration: f64,
        optInMaximum: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInAcceleration: f64,
        optInMaximum: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SAR_Lookback(optInAcceleration: f64, optInMaximum: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SAREXT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInStartValue: f64,
        optInOffsetOnReverse: f64,
        optInAccelerationInitLong: f64,
        optInAccelerationLong: f64,
        optInAccelerationMaxLong: f64,
        optInAccelerationInitShort: f64,
        optInAccelerationShort: f64,
        optInAccelerationMaxShort: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SAREXT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInStartValue: f64,
        optInOffsetOnReverse: f64,
        optInAccelerationInitLong: f64,
        optInAccelerationLong: f64,
        optInAccelerationMaxLong: f64,
        optInAccelerationInitShort: f64,
        optInAccelerationShort: f64,
        optInAccelerationMaxShort: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SAREXT_Lookback(
        optInStartValue: f64,
        optInOffsetOnReverse: f64,
        optInAccelerationInitLong: f64,
        optInAccelerationLong: f64,
        optInAccelerationMaxLong: f64,
        optInAccelerationInitShort: f64,
        optInAccelerationShort: f64,
        optInAccelerationMaxShort: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SIN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SINH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SINH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SINH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SQRT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SQRT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SQRT_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STDDEV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STDDEV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STDDEV_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInFastK_Period: ::std::os::raw::c_int,
        optInSlowK_Period: ::std::os::raw::c_int,
        optInSlowK_MAType: TA_MAType,
        optInSlowD_Period: ::std::os::raw::c_int,
        optInSlowD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outSlowK: *mut f64,
        outSlowD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInFastK_Period: ::std::os::raw::c_int,
        optInSlowK_Period: ::std::os::raw::c_int,
        optInSlowK_MAType: TA_MAType,
        optInSlowD_Period: ::std::os::raw::c_int,
        optInSlowD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outSlowK: *mut f64,
        outSlowD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCH_Lookback(
        optInFastK_Period: ::std::os::raw::c_int,
        optInSlowK_Period: ::std::os::raw::c_int,
        optInSlowK_MAType: TA_MAType,
        optInSlowD_Period: ::std::os::raw::c_int,
        optInSlowD_MAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCHF(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outFastK: *mut f64,
        outFastD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCHF(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outFastK: *mut f64,
        outFastD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCHF_Lookback(
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCHRSI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outFastK: *mut f64,
        outFastD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCHRSI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outFastK: *mut f64,
        outFastD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCHRSI_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SUB(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SUB(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SUB_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SUM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SUM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SUM_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_T3(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInVFactor: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_T3(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInVFactor: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_T3_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInVFactor: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TANH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TANH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TANH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TEMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TEMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TEMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRANGE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRANGE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRANGE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRIMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRIMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRIMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRIX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRIX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRIX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TSF(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TSF(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TSF_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TYPPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TYPPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TYPPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ULTOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod1: ::std::os::raw::c_int,
        optInTimePeriod2: ::std::os::raw::c_int,
        optInTimePeriod3: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ULTOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod1: ::std::os::raw::c_int,
        optInTimePeriod2: ::std::os::raw::c_int,
        optInTimePeriod3: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ULTOSC_Lookback(
        optInTimePeriod1: ::std::os::raw::c_int,
        optInTimePeriod2: ::std::os::raw::c_int,
        optInTimePeriod3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_VAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_VAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_VAR_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WCLPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WCLPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WCLPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WILLR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WILLR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WILLR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SetUnstablePeriod(
        id: TA_FuncUnstId,
        unstablePeriod: ::std::os::raw::c_uint,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetUnstablePeriod(id: TA_FuncUnstId) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TA_SetCompatibility(value: TA_Compatibility) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetCompatibility() -> TA_Compatibility;
}
extern "C" {
    pub fn TA_SetCandleSettings(
        settingType: TA_CandleSettingType,
        rangeType: TA_RangeType,
        avgPeriod: ::std::os::raw::c_int,
        factor: f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_RestoreCandleDefaultSettings(settingType: TA_CandleSettingType) -> TA_RetCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
