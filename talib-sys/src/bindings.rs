/* automatically generated by rust-bindgen 0.69.4 */

pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150000;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const USE_CLANG_STDARG: u32 = 0;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const USE_CLANG_LIMITS: u32 = 0;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const __64BIT__: u32 = 1;
pub const TA_INTEGER_MIN: i32 = -2147483647;
pub const TA_INTEGER_MAX: u32 = 2147483647;
pub const TA_REAL_MIN: f64 = -30000000000000000000000000000000000000.0;
pub const TA_REAL_MAX: f64 = 30000000000000000000000000000000000000.0;
pub const TA_INTEGER_DEFAULT: i32 = -2147483648;
pub const TA_REAL_DEFAULT: f64 = -40000000000000000000000000000000000000.0;
pub const TA_FUNC_FLG_OVERLAP: u32 = 16777216;
pub const TA_FUNC_FLG_VOLUME: u32 = 67108864;
pub const TA_FUNC_FLG_UNST_PER: u32 = 134217728;
pub const TA_FUNC_FLG_CANDLESTICK: u32 = 268435456;
pub const TA_IN_PRICE_OPEN: u32 = 1;
pub const TA_IN_PRICE_HIGH: u32 = 2;
pub const TA_IN_PRICE_LOW: u32 = 4;
pub const TA_IN_PRICE_CLOSE: u32 = 8;
pub const TA_IN_PRICE_VOLUME: u32 = 16;
pub const TA_IN_PRICE_OPENINTEREST: u32 = 32;
pub const TA_IN_PRICE_TIMESTAMP: u32 = 64;
pub const TA_OPTIN_IS_PERCENT: u32 = 1048576;
pub const TA_OPTIN_IS_DEGREE: u32 = 2097152;
pub const TA_OPTIN_IS_CURRENCY: u32 = 4194304;
pub const TA_OPTIN_ADVANCED: u32 = 16777216;
pub const TA_OUT_LINE: u32 = 1;
pub const TA_OUT_DOT_LINE: u32 = 2;
pub const TA_OUT_DASH_LINE: u32 = 4;
pub const TA_OUT_DOT: u32 = 8;
pub const TA_OUT_HISTO: u32 = 16;
pub const TA_OUT_PATTERN_BOOL: u32 = 32;
pub const TA_OUT_PATTERN_BULL_BEAR: u32 = 64;
pub const TA_OUT_PATTERN_STRENGTH: u32 = 128;
pub const TA_OUT_POSITIVE: u32 = 256;
pub const TA_OUT_NEGATIVE: u32 = 512;
pub const TA_OUT_ZERO: u32 = 1024;
pub const TA_OUT_UPPER_LIMIT: u32 = 2048;
pub const TA_OUT_LOWER_LIMIT: u32 = 4096;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type Int32 = ::std::os::raw::c_int;
pub type UInt32 = ::std::os::raw::c_uint;
pub type Int64 = ::std::os::raw::c_long;
pub type UInt64 = ::std::os::raw::c_ulong;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TA_RetCode {
    TA_SUCCESS = 0,
    TA_LIB_NOT_INITIALIZE = 1,
    TA_BAD_PARAM = 2,
    TA_ALLOC_ERR = 3,
    TA_GROUP_NOT_FOUND = 4,
    TA_FUNC_NOT_FOUND = 5,
    TA_INVALID_HANDLE = 6,
    TA_INVALID_PARAM_HOLDER = 7,
    TA_INVALID_PARAM_HOLDER_TYPE = 8,
    TA_INVALID_PARAM_FUNCTION = 9,
    TA_INPUT_NOT_ALL_INITIALIZE = 10,
    TA_OUTPUT_NOT_ALL_INITIALIZE = 11,
    TA_OUT_OF_RANGE_START_INDEX = 12,
    TA_OUT_OF_RANGE_END_INDEX = 13,
    TA_INVALID_LIST_TYPE = 14,
    TA_BAD_OBJECT = 15,
    TA_NOT_SUPPORTED = 16,
    TA_INTERNAL_ERROR = 5000,
    TA_UNKNOWN_ERR = 65535,
}
pub const TA_Compatibility_TA_COMPATIBILITY_DEFAULT: TA_Compatibility = 0;
pub const TA_Compatibility_TA_COMPATIBILITY_METASTOCK: TA_Compatibility = 1;
pub type TA_Compatibility = ::std::os::raw::c_uint;
pub const TA_MAType_TA_MAType_SMA: TA_MAType = 0;
pub const TA_MAType_TA_MAType_EMA: TA_MAType = 1;
pub const TA_MAType_TA_MAType_WMA: TA_MAType = 2;
pub const TA_MAType_TA_MAType_DEMA: TA_MAType = 3;
pub const TA_MAType_TA_MAType_TEMA: TA_MAType = 4;
pub const TA_MAType_TA_MAType_TRIMA: TA_MAType = 5;
pub const TA_MAType_TA_MAType_KAMA: TA_MAType = 6;
pub const TA_MAType_TA_MAType_MAMA: TA_MAType = 7;
pub const TA_MAType_TA_MAType_T3: TA_MAType = 8;
pub type TA_MAType = ::std::os::raw::c_uint;
pub const TA_FuncUnstId_TA_FUNC_UNST_ADX: TA_FuncUnstId = 0;
pub const TA_FuncUnstId_TA_FUNC_UNST_ADXR: TA_FuncUnstId = 1;
pub const TA_FuncUnstId_TA_FUNC_UNST_ATR: TA_FuncUnstId = 2;
pub const TA_FuncUnstId_TA_FUNC_UNST_CMO: TA_FuncUnstId = 3;
pub const TA_FuncUnstId_TA_FUNC_UNST_DX: TA_FuncUnstId = 4;
pub const TA_FuncUnstId_TA_FUNC_UNST_EMA: TA_FuncUnstId = 5;
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_DCPERIOD: TA_FuncUnstId = 6;
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_DCPHASE: TA_FuncUnstId = 7;
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_PHASOR: TA_FuncUnstId = 8;
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_SINE: TA_FuncUnstId = 9;
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_TRENDLINE: TA_FuncUnstId = 10;
pub const TA_FuncUnstId_TA_FUNC_UNST_HT_TRENDMODE: TA_FuncUnstId = 11;
pub const TA_FuncUnstId_TA_FUNC_UNST_KAMA: TA_FuncUnstId = 12;
pub const TA_FuncUnstId_TA_FUNC_UNST_MAMA: TA_FuncUnstId = 13;
pub const TA_FuncUnstId_TA_FUNC_UNST_MFI: TA_FuncUnstId = 14;
pub const TA_FuncUnstId_TA_FUNC_UNST_MINUS_DI: TA_FuncUnstId = 15;
pub const TA_FuncUnstId_TA_FUNC_UNST_MINUS_DM: TA_FuncUnstId = 16;
pub const TA_FuncUnstId_TA_FUNC_UNST_NATR: TA_FuncUnstId = 17;
pub const TA_FuncUnstId_TA_FUNC_UNST_PLUS_DI: TA_FuncUnstId = 18;
pub const TA_FuncUnstId_TA_FUNC_UNST_PLUS_DM: TA_FuncUnstId = 19;
pub const TA_FuncUnstId_TA_FUNC_UNST_RSI: TA_FuncUnstId = 20;
pub const TA_FuncUnstId_TA_FUNC_UNST_STOCHRSI: TA_FuncUnstId = 21;
pub const TA_FuncUnstId_TA_FUNC_UNST_T3: TA_FuncUnstId = 22;
pub const TA_FuncUnstId_TA_FUNC_UNST_ALL: TA_FuncUnstId = 23;
pub const TA_FuncUnstId_TA_FUNC_UNST_NONE: TA_FuncUnstId = -1;
pub type TA_FuncUnstId = ::std::os::raw::c_int;
pub const TA_RangeType_TA_RangeType_RealBody: TA_RangeType = 0;
pub const TA_RangeType_TA_RangeType_HighLow: TA_RangeType = 1;
pub const TA_RangeType_TA_RangeType_Shadows: TA_RangeType = 2;
pub type TA_RangeType = ::std::os::raw::c_uint;
pub const TA_CandleSettingType_TA_BodyLong: TA_CandleSettingType = 0;
pub const TA_CandleSettingType_TA_BodyVeryLong: TA_CandleSettingType = 1;
pub const TA_CandleSettingType_TA_BodyShort: TA_CandleSettingType = 2;
pub const TA_CandleSettingType_TA_BodyDoji: TA_CandleSettingType = 3;
pub const TA_CandleSettingType_TA_ShadowLong: TA_CandleSettingType = 4;
pub const TA_CandleSettingType_TA_ShadowVeryLong: TA_CandleSettingType = 5;
pub const TA_CandleSettingType_TA_ShadowShort: TA_CandleSettingType = 6;
pub const TA_CandleSettingType_TA_ShadowVeryShort: TA_CandleSettingType = 7;
pub const TA_CandleSettingType_TA_Near: TA_CandleSettingType = 8;
pub const TA_CandleSettingType_TA_Far: TA_CandleSettingType = 9;
pub const TA_CandleSettingType_TA_Equal: TA_CandleSettingType = 10;
pub const TA_CandleSettingType_TA_AllCandleSettings: TA_CandleSettingType = 11;
pub type TA_CandleSettingType = ::std::os::raw::c_uint;
extern "C" {
    pub fn TA_GetVersionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionMajor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionMinor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionBuild() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionDate() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_GetVersionTime() -> *const ::std::os::raw::c_char;
}
pub type TA_Real = f64;
pub type TA_Integer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_StringTable {
    pub size: ::std::os::raw::c_uint,
    pub string: *mut *const ::std::os::raw::c_char,
    pub hiddenData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TA_StringTable() {
    const UNINIT: ::std::mem::MaybeUninit<TA_StringTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_StringTable>(),
        24usize,
        concat!("Size of: ", stringify!(TA_StringTable))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_StringTable>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_StringTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_StringTable),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_StringTable),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiddenData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_StringTable),
            "::",
            stringify!(hiddenData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_RetCodeInfo {
    pub enumStr: *const ::std::os::raw::c_char,
    pub infoStr: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_RetCodeInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_RetCodeInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_RetCodeInfo>(),
        16usize,
        concat!("Size of: ", stringify!(TA_RetCodeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_RetCodeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_RetCodeInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enumStr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RetCodeInfo),
            "::",
            stringify!(enumStr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infoStr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RetCodeInfo),
            "::",
            stringify!(infoStr)
        )
    );
}
extern "C" {
    pub fn TA_SetRetCodeInfo(theRetCode: TA_RetCode, retCodeInfo: *mut TA_RetCodeInfo);
}
extern "C" {
    pub fn TA_Initialize() -> TA_RetCode;
}
extern "C" {
    pub fn TA_Shutdown() -> TA_RetCode;
}
extern "C" {
    pub fn TA_GroupTableAlloc(table: *mut *mut TA_StringTable) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GroupTableFree(table: *mut TA_StringTable) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FuncTableAlloc(
        group: *const ::std::os::raw::c_char,
        table: *mut *mut TA_StringTable,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FuncTableFree(table: *mut TA_StringTable) -> TA_RetCode;
}
pub type TA_FuncHandle = ::std::os::raw::c_uint;
extern "C" {
    pub fn TA_GetFuncHandle(
        name: *const ::std::os::raw::c_char,
        handle: *mut *const TA_FuncHandle,
    ) -> TA_RetCode;
}
pub type TA_FuncFlags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_FuncInfo {
    pub name: *const ::std::os::raw::c_char,
    pub group: *const ::std::os::raw::c_char,
    pub hint: *const ::std::os::raw::c_char,
    pub camelCaseName: *const ::std::os::raw::c_char,
    pub flags: TA_FuncFlags,
    pub nbInput: ::std::os::raw::c_uint,
    pub nbOptInput: ::std::os::raw::c_uint,
    pub nbOutput: ::std::os::raw::c_uint,
    pub handle: *const TA_FuncHandle,
}
#[test]
fn bindgen_test_layout_TA_FuncInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_FuncInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_FuncInfo>(),
        56usize,
        concat!("Size of: ", stringify!(TA_FuncInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_FuncInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_FuncInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).camelCaseName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(camelCaseName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbInput) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(nbInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbOptInput) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(nbOptInput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbOutput) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(nbOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_FuncInfo),
            "::",
            stringify!(handle)
        )
    );
}
extern "C" {
    pub fn TA_GetFuncInfo(
        handle: *const TA_FuncHandle,
        funcInfo: *mut *const TA_FuncInfo,
    ) -> TA_RetCode;
}
pub type TA_CallForEachFunc = ::std::option::Option<
    unsafe extern "C" fn(funcInfo: *const TA_FuncInfo, opaqueData: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn TA_ForEachFunc(
        functionToCall: TA_CallForEachFunc,
        opaqueData: *mut ::std::os::raw::c_void,
    ) -> TA_RetCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_RealRange {
    pub min: TA_Real,
    pub max: TA_Real,
    pub precision: TA_Integer,
    pub suggested_start: TA_Real,
    pub suggested_end: TA_Real,
    pub suggested_increment: TA_Real,
}
#[test]
fn bindgen_test_layout_TA_RealRange() {
    const UNINIT: ::std::mem::MaybeUninit<TA_RealRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_RealRange>(),
        48usize,
        concat!("Size of: ", stringify!(TA_RealRange))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_RealRange>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_RealRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(suggested_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(suggested_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_increment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealRange),
            "::",
            stringify!(suggested_increment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_IntegerRange {
    pub min: TA_Integer,
    pub max: TA_Integer,
    pub suggested_start: TA_Integer,
    pub suggested_end: TA_Integer,
    pub suggested_increment: TA_Integer,
}
#[test]
fn bindgen_test_layout_TA_IntegerRange() {
    const UNINIT: ::std::mem::MaybeUninit<TA_IntegerRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_IntegerRange>(),
        20usize,
        concat!("Size of: ", stringify!(TA_IntegerRange))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_IntegerRange>(),
        4usize,
        concat!("Alignment of ", stringify!(TA_IntegerRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(suggested_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(suggested_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suggested_increment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerRange),
            "::",
            stringify!(suggested_increment)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_RealDataPair {
    pub value: TA_Real,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_RealDataPair() {
    const UNINIT: ::std::mem::MaybeUninit<TA_RealDataPair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_RealDataPair>(),
        16usize,
        concat!("Size of: ", stringify!(TA_RealDataPair))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_RealDataPair>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_RealDataPair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealDataPair),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealDataPair),
            "::",
            stringify!(string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_IntegerDataPair {
    pub value: TA_Integer,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_IntegerDataPair() {
    const UNINIT: ::std::mem::MaybeUninit<TA_IntegerDataPair> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_IntegerDataPair>(),
        16usize,
        concat!("Size of: ", stringify!(TA_IntegerDataPair))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_IntegerDataPair>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_IntegerDataPair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerDataPair),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerDataPair),
            "::",
            stringify!(string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_RealList {
    pub data: *const TA_RealDataPair,
    pub nbElement: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_TA_RealList() {
    const UNINIT: ::std::mem::MaybeUninit<TA_RealList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_RealList>(),
        16usize,
        concat!("Size of: ", stringify!(TA_RealList))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_RealList>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_RealList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealList),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbElement) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_RealList),
            "::",
            stringify!(nbElement)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_IntegerList {
    pub data: *const TA_IntegerDataPair,
    pub nbElement: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_TA_IntegerList() {
    const UNINIT: ::std::mem::MaybeUninit<TA_IntegerList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_IntegerList>(),
        16usize,
        concat!("Size of: ", stringify!(TA_IntegerList))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_IntegerList>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_IntegerList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerList),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbElement) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_IntegerList),
            "::",
            stringify!(nbElement)
        )
    );
}
pub const TA_InputParameterType_TA_Input_Price: TA_InputParameterType = 0;
pub const TA_InputParameterType_TA_Input_Real: TA_InputParameterType = 1;
pub const TA_InputParameterType_TA_Input_Integer: TA_InputParameterType = 2;
pub type TA_InputParameterType = ::std::os::raw::c_uint;
pub const TA_OptInputParameterType_TA_OptInput_RealRange: TA_OptInputParameterType = 0;
pub const TA_OptInputParameterType_TA_OptInput_RealList: TA_OptInputParameterType = 1;
pub const TA_OptInputParameterType_TA_OptInput_IntegerRange: TA_OptInputParameterType = 2;
pub const TA_OptInputParameterType_TA_OptInput_IntegerList: TA_OptInputParameterType = 3;
pub type TA_OptInputParameterType = ::std::os::raw::c_uint;
pub const TA_OutputParameterType_TA_Output_Real: TA_OutputParameterType = 0;
pub const TA_OutputParameterType_TA_Output_Integer: TA_OutputParameterType = 1;
pub type TA_OutputParameterType = ::std::os::raw::c_uint;
pub type TA_InputFlags = ::std::os::raw::c_int;
pub type TA_OptInputFlags = ::std::os::raw::c_int;
pub type TA_OutputFlags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_InputParameterInfo {
    pub type_: TA_InputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_InputFlags,
}
#[test]
fn bindgen_test_layout_TA_InputParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_InputParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_InputParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(TA_InputParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_InputParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_InputParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_InputParameterInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_InputParameterInfo),
            "::",
            stringify!(paramName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_InputParameterInfo),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_OptInputParameterInfo {
    pub type_: TA_OptInputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_OptInputFlags,
    pub displayName: *const ::std::os::raw::c_char,
    pub dataSet: *const ::std::os::raw::c_void,
    pub defaultValue: TA_Real,
    pub hint: *const ::std::os::raw::c_char,
    pub helpFile: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TA_OptInputParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_OptInputParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_OptInputParameterInfo>(),
        64usize,
        concat!("Size of: ", stringify!(TA_OptInputParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_OptInputParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_OptInputParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(paramName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(displayName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSet) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(dataSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultValue) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(defaultValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).helpFile) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OptInputParameterInfo),
            "::",
            stringify!(helpFile)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_OutputParameterInfo {
    pub type_: TA_OutputParameterType,
    pub paramName: *const ::std::os::raw::c_char,
    pub flags: TA_OutputFlags,
}
#[test]
fn bindgen_test_layout_TA_OutputParameterInfo() {
    const UNINIT: ::std::mem::MaybeUninit<TA_OutputParameterInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_OutputParameterInfo>(),
        24usize,
        concat!("Size of: ", stringify!(TA_OutputParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_OutputParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_OutputParameterInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OutputParameterInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OutputParameterInfo),
            "::",
            stringify!(paramName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_OutputParameterInfo),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn TA_GetInputParameterInfo(
        handle: *const TA_FuncHandle,
        paramIndex: ::std::os::raw::c_uint,
        info: *mut *const TA_InputParameterInfo,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetOptInputParameterInfo(
        handle: *const TA_FuncHandle,
        paramIndex: ::std::os::raw::c_uint,
        info: *mut *const TA_OptInputParameterInfo,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetOutputParameterInfo(
        handle: *const TA_FuncHandle,
        paramIndex: ::std::os::raw::c_uint,
        info: *mut *const TA_OutputParameterInfo,
    ) -> TA_RetCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TA_ParamHolder {
    pub hiddenData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TA_ParamHolder() {
    const UNINIT: ::std::mem::MaybeUninit<TA_ParamHolder> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TA_ParamHolder>(),
        8usize,
        concat!("Size of: ", stringify!(TA_ParamHolder))
    );
    assert_eq!(
        ::std::mem::align_of::<TA_ParamHolder>(),
        8usize,
        concat!("Alignment of ", stringify!(TA_ParamHolder))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiddenData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TA_ParamHolder),
            "::",
            stringify!(hiddenData)
        )
    );
}
extern "C" {
    pub fn TA_ParamHolderAlloc(
        handle: *const TA_FuncHandle,
        allocatedParams: *mut *mut TA_ParamHolder,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ParamHolderFree(params: *mut TA_ParamHolder) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamIntegerPtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        value: *const TA_Integer,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamRealPtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        value: *const TA_Real,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetInputParamPricePtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        open: *const TA_Real,
        high: *const TA_Real,
        low: *const TA_Real,
        close: *const TA_Real,
        volume: *const TA_Real,
        openInterest: *const TA_Real,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOptInputParamInteger(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        optInValue: TA_Integer,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOptInputParamReal(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        optInValue: TA_Real,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOutputParamIntegerPtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        out: *mut TA_Integer,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SetOutputParamRealPtr(
        params: *mut TA_ParamHolder,
        paramIndex: ::std::os::raw::c_uint,
        out: *mut TA_Real,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetLookback(params: *const TA_ParamHolder, lookback: *mut TA_Integer) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CallFunc(
        params: *const TA_ParamHolder,
        startIdx: TA_Integer,
        endIdx: TA_Integer,
        outBegIdx: *mut TA_Integer,
        outNbElement: *mut TA_Integer,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FunctionDescriptionXML() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TA_ACOS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ACOS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ACOS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        inVolume: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        inVolume: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        inVolume: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        inVolume: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADOSC_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ADXR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ADXR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ADXR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_APO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_APO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_APO_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AROON(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outAroonDown: *mut f64,
        outAroonUp: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AROON(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outAroonDown: *mut f64,
        outAroonUp: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AROON_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AROONOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AROONOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AROONOSC_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ASIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ASIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ASIN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ATAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ATAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ATAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ATR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ATR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ATR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_AVGPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_AVGPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_AVGPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BBANDS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDevUp: f64,
        optInNbDevDn: f64,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outRealUpperBand: *mut f64,
        outRealMiddleBand: *mut f64,
        outRealLowerBand: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BBANDS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDevUp: f64,
        optInNbDevDn: f64,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outRealUpperBand: *mut f64,
        outRealMiddleBand: *mut f64,
        outRealLowerBand: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BBANDS_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDevUp: f64,
        optInNbDevDn: f64,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BETA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BETA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BETA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_BOP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_BOP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_BOP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CCI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CCI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CCI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL2CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL2CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL2CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3BLACKCROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3BLACKCROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3BLACKCROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3INSIDE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3INSIDE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3INSIDE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3LINESTRIKE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3LINESTRIKE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3LINESTRIKE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3OUTSIDE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3OUTSIDE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3OUTSIDE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3STARSINSOUTH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3STARSINSOUTH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3STARSINSOUTH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDL3WHITESOLDIERS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDL3WHITESOLDIERS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDL3WHITESOLDIERS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLABANDONEDBABY(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLABANDONEDBABY(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLABANDONEDBABY_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLADVANCEBLOCK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLADVANCEBLOCK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLADVANCEBLOCK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLBELTHOLD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLBELTHOLD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLBELTHOLD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLBREAKAWAY(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLBREAKAWAY(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLBREAKAWAY_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCLOSINGMARUBOZU(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCLOSINGMARUBOZU(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCLOSINGMARUBOZU_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCONCEALBABYSWALL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCONCEALBABYSWALL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCONCEALBABYSWALL_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLCOUNTERATTACK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLCOUNTERATTACK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLCOUNTERATTACK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDARKCLOUDCOVER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDARKCLOUDCOVER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDARKCLOUDCOVER_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDOJISTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLDRAGONFLYDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLDRAGONFLYDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLDRAGONFLYDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLENGULFING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLENGULFING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLENGULFING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLEVENINGDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLEVENINGDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLEVENINGDOJISTAR_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLEVENINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLEVENINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLEVENINGSTAR_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLGAPSIDESIDEWHITE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLGAPSIDESIDEWHITE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLGAPSIDESIDEWHITE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLGRAVESTONEDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLGRAVESTONEDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLGRAVESTONEDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHAMMER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHAMMER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHAMMER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHANGINGMAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHANGINGMAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHANGINGMAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHARAMI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHARAMI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHARAMI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHARAMICROSS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHARAMICROSS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHARAMICROSS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIGHWAVE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIGHWAVE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIGHWAVE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIKKAKE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIKKAKE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIKKAKE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHIKKAKEMOD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHIKKAKEMOD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHIKKAKEMOD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLHOMINGPIGEON(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLHOMINGPIGEON(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLHOMINGPIGEON_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLIDENTICAL3CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLIDENTICAL3CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLIDENTICAL3CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLINNECK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLINNECK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLINNECK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLINVERTEDHAMMER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLINVERTEDHAMMER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLINVERTEDHAMMER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLKICKING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLKICKING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLKICKING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLKICKINGBYLENGTH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLKICKINGBYLENGTH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLKICKINGBYLENGTH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLADDERBOTTOM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLADDERBOTTOM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLADDERBOTTOM_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLONGLEGGEDDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLONGLEGGEDDOJI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLONGLEGGEDDOJI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLLONGLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLLONGLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLLONGLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMARUBOZU(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMARUBOZU(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMARUBOZU_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMATCHINGLOW(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMATCHINGLOW(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMATCHINGLOW_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMATHOLD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMATHOLD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMATHOLD_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMORNINGDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMORNINGDOJISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMORNINGDOJISTAR_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLMORNINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLMORNINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInPenetration: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLMORNINGSTAR_Lookback(optInPenetration: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLONNECK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLONNECK(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLONNECK_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLPIERCING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLPIERCING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLPIERCING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLRICKSHAWMAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLRICKSHAWMAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLRICKSHAWMAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLRISEFALL3METHODS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLRISEFALL3METHODS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLRISEFALL3METHODS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSEPARATINGLINES(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSEPARATINGLINES(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSEPARATINGLINES_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSHOOTINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSHOOTINGSTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSHOOTINGSTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSHORTLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSHORTLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSHORTLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSPINNINGTOP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSPINNINGTOP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSPINNINGTOP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSTALLEDPATTERN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSTALLEDPATTERN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSTALLEDPATTERN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLSTICKSANDWICH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLSTICKSANDWICH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLSTICKSANDWICH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTAKURI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTAKURI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTAKURI_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTASUKIGAP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTASUKIGAP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTASUKIGAP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTHRUSTING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTHRUSTING(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTHRUSTING_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLTRISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLTRISTAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLTRISTAR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLUNIQUE3RIVER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLUNIQUE3RIVER(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLUNIQUE3RIVER_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLUPSIDEGAP2CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLUPSIDEGAP2CROWS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLUPSIDEGAP2CROWS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CDLXSIDEGAP3METHODS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f64,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CDLXSIDEGAP3METHODS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inOpen: *const f32,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CDLXSIDEGAP3METHODS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CEIL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CEIL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CEIL_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CMO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CMO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CMO_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_CORREL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_CORREL(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_CORREL_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_COS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_COS(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_COS_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_COSH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_COSH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_COSH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DEMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DEMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DEMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DIV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DIV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DIV_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_DX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_DX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_DX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_EMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_EMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_EMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_EXP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_EXP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_EXP_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_FLOOR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_FLOOR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_FLOOR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_DCPERIOD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_DCPERIOD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_DCPERIOD_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_DCPHASE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_DCPHASE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_DCPHASE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_PHASOR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInPhase: *mut f64,
        outQuadrature: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_PHASOR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInPhase: *mut f64,
        outQuadrature: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_PHASOR_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_SINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outSine: *mut f64,
        outLeadSine: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_SINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outSine: *mut f64,
        outLeadSine: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_SINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_TRENDLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_TRENDLINE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_TRENDLINE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_HT_TRENDMODE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_HT_TRENDMODE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_HT_TRENDMODE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_KAMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_KAMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_KAMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_ANGLE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_ANGLE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_ANGLE_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_INTERCEPT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_INTERCEPT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_INTERCEPT_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LINEARREG_SLOPE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LINEARREG_SLOPE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LINEARREG_SLOPE_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_LOG10(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_LOG10(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_LOG10_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MA_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSignalPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACD(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSignalPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACD_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSignalPeriod: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACDEXT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInFastMAType: TA_MAType,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSlowMAType: TA_MAType,
        optInSignalPeriod: ::std::os::raw::c_int,
        optInSignalMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACDEXT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInFastMAType: TA_MAType,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSlowMAType: TA_MAType,
        optInSignalPeriod: ::std::os::raw::c_int,
        optInSignalMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACDEXT_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInFastMAType: TA_MAType,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInSlowMAType: TA_MAType,
        optInSignalPeriod: ::std::os::raw::c_int,
        optInSignalMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MACDFIX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInSignalPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MACDFIX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInSignalPeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMACD: *mut f64,
        outMACDSignal: *mut f64,
        outMACDHist: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MACDFIX_Lookback(optInSignalPeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastLimit: f64,
        optInSlowLimit: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMAMA: *mut f64,
        outFAMA: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastLimit: f64,
        optInSlowLimit: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMAMA: *mut f64,
        outFAMA: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAMA_Lookback(optInFastLimit: f64, optInSlowLimit: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAVP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        inPeriods: *const f64,
        optInMinPeriod: ::std::os::raw::c_int,
        optInMaxPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAVP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        inPeriods: *const f32,
        optInMinPeriod: ::std::os::raw::c_int,
        optInMaxPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAVP_Lookback(
        optInMinPeriod: ::std::os::raw::c_int,
        optInMaxPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MAXINDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MAXINDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MAXINDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MEDPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MEDPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MEDPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MFI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        inVolume: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MFI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        inVolume: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MFI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIDPOINT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIDPOINT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIDPOINT_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIDPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIDPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIDPRICE_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MIN_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MININDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MININDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outInteger: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MININDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINMAX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMin: *mut f64,
        outMax: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINMAX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMin: *mut f64,
        outMax: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINMAX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINMAXINDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMinIdx: *mut ::std::os::raw::c_int,
        outMaxIdx: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINMAXINDEX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outMinIdx: *mut ::std::os::raw::c_int,
        outMaxIdx: *mut ::std::os::raw::c_int,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINMAXINDEX_Lookback(optInTimePeriod: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINUS_DI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINUS_DI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINUS_DI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MINUS_DM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MINUS_DM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MINUS_DM_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MOM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MOM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MOM_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_MULT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_MULT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_MULT_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_NATR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_NATR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_NATR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_OBV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        inVolume: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_OBV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        inVolume: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_OBV_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PLUS_DI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PLUS_DI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PLUS_DI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PLUS_DM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PLUS_DM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PLUS_DM_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_PPO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_PPO(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_PPO_Lookback(
        optInFastPeriod: ::std::os::raw::c_int,
        optInSlowPeriod: ::std::os::raw::c_int,
        optInMAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROC_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCP(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCP_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ROCR100(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ROCR100(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ROCR100_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_RSI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_RSI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_RSI_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInAcceleration: f64,
        optInMaximum: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInAcceleration: f64,
        optInMaximum: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SAR_Lookback(optInAcceleration: f64, optInMaximum: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SAREXT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        optInStartValue: f64,
        optInOffsetOnReverse: f64,
        optInAccelerationInitLong: f64,
        optInAccelerationLong: f64,
        optInAccelerationMaxLong: f64,
        optInAccelerationInitShort: f64,
        optInAccelerationShort: f64,
        optInAccelerationMaxShort: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SAREXT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        optInStartValue: f64,
        optInOffsetOnReverse: f64,
        optInAccelerationInitLong: f64,
        optInAccelerationLong: f64,
        optInAccelerationMaxLong: f64,
        optInAccelerationInitShort: f64,
        optInAccelerationShort: f64,
        optInAccelerationMaxShort: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SAREXT_Lookback(
        optInStartValue: f64,
        optInOffsetOnReverse: f64,
        optInAccelerationInitLong: f64,
        optInAccelerationLong: f64,
        optInAccelerationMaxLong: f64,
        optInAccelerationInitShort: f64,
        optInAccelerationShort: f64,
        optInAccelerationMaxShort: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SIN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SIN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SINH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SINH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SINH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SQRT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SQRT(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SQRT_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STDDEV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STDDEV(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STDDEV_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInFastK_Period: ::std::os::raw::c_int,
        optInSlowK_Period: ::std::os::raw::c_int,
        optInSlowK_MAType: TA_MAType,
        optInSlowD_Period: ::std::os::raw::c_int,
        optInSlowD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outSlowK: *mut f64,
        outSlowD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInFastK_Period: ::std::os::raw::c_int,
        optInSlowK_Period: ::std::os::raw::c_int,
        optInSlowK_MAType: TA_MAType,
        optInSlowD_Period: ::std::os::raw::c_int,
        optInSlowD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outSlowK: *mut f64,
        outSlowD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCH_Lookback(
        optInFastK_Period: ::std::os::raw::c_int,
        optInSlowK_Period: ::std::os::raw::c_int,
        optInSlowK_MAType: TA_MAType,
        optInSlowD_Period: ::std::os::raw::c_int,
        optInSlowD_MAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCHF(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outFastK: *mut f64,
        outFastD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCHF(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outFastK: *mut f64,
        outFastD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCHF_Lookback(
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_STOCHRSI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outFastK: *mut f64,
        outFastD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_STOCHRSI(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outFastK: *mut f64,
        outFastD: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_STOCHRSI_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInFastK_Period: ::std::os::raw::c_int,
        optInFastD_Period: ::std::os::raw::c_int,
        optInFastD_MAType: TA_MAType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SUB(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f64,
        inReal1: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SUB(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal0: *const f32,
        inReal1: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SUB_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SUM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_SUM(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_SUM_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_T3(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInVFactor: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_T3(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInVFactor: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_T3_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInVFactor: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TAN(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TAN_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TANH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TANH(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TANH_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TEMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TEMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TEMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRANGE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRANGE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRANGE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRIMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRIMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRIMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TRIX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TRIX(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TRIX_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TSF(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TSF(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TSF_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_TYPPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_TYPPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_TYPPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_ULTOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod1: ::std::os::raw::c_int,
        optInTimePeriod2: ::std::os::raw::c_int,
        optInTimePeriod3: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_ULTOSC(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod1: ::std::os::raw::c_int,
        optInTimePeriod2: ::std::os::raw::c_int,
        optInTimePeriod3: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_ULTOSC_Lookback(
        optInTimePeriod1: ::std::os::raw::c_int,
        optInTimePeriod2: ::std::os::raw::c_int,
        optInTimePeriod3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_VAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_VAR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_VAR_Lookback(
        optInTimePeriod: ::std::os::raw::c_int,
        optInNbDev: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WCLPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WCLPRICE(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WCLPRICE_Lookback() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WILLR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f64,
        inLow: *const f64,
        inClose: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WILLR(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inHigh: *const f32,
        inLow: *const f32,
        inClose: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WILLR_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_WMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f64,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_S_WMA(
        startIdx: ::std::os::raw::c_int,
        endIdx: ::std::os::raw::c_int,
        inReal: *const f32,
        optInTimePeriod: ::std::os::raw::c_int,
        outBegIdx: *mut ::std::os::raw::c_int,
        outNBElement: *mut ::std::os::raw::c_int,
        outReal: *mut f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_WMA_Lookback(optInTimePeriod: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TA_SetUnstablePeriod(
        id: TA_FuncUnstId,
        unstablePeriod: ::std::os::raw::c_uint,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetUnstablePeriod(id: TA_FuncUnstId) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn TA_SetCompatibility(value: TA_Compatibility) -> TA_RetCode;
}
extern "C" {
    pub fn TA_GetCompatibility() -> TA_Compatibility;
}
extern "C" {
    pub fn TA_SetCandleSettings(
        settingType: TA_CandleSettingType,
        rangeType: TA_RangeType,
        avgPeriod: ::std::os::raw::c_int,
        factor: f64,
    ) -> TA_RetCode;
}
extern "C" {
    pub fn TA_RestoreCandleDefaultSettings(settingType: TA_CandleSettingType) -> TA_RetCode;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
